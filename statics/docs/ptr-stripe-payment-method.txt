import React, { useState } from "react"
import { view } from "@risingstack/react-easy-state"
import fecha from "fecha"

import api from "../lib/api.js"

import Button from "./Button"
import Spinner from "./Spinner.js"
import cn from "classnames"

export default view(function StripeMethodRow({
	method,
	selectedMethod,
	processing,
	setProcessing,
	cancelOpenIntents,
	setUpPaymentIntent,
	deletingCard,
	setDeletingCard,
	reloadData,
	handleError,
	preferredMethod,
	disableSelect,
	allowEditing,
	customerID,
}) {
	const { brand, exp_month: expMonth, exp_year: expYear, last4 } = method.card
	const addedOn = fecha.format(new Date(method.created * 1000), "M/D/YY")
	const [editingExpiry, setEditingExpiry] = useState(null)
	const [updatingCard, setUpdatingCard] = useState(false)

	async function updateCard() {
		try {
			setUpdatingCard(true)

			await api.patch(`stripe/payment-method/${method.id}/${customerID}`, {
				card: {
					exp_year: parseInt("20" + editingExpiry.expYear),
					exp_month: editingExpiry.expMonth,
				},
			})

			setEditingExpiry(null)
			reloadData()
		} catch (err) {
			err.message = "There was an error updating the card: " + err.message
			handleError(err)
		} finally {
			setUpdatingCard(false)
		}
	}

	// Brand from stripe is etiher American Express, Diners Club,
	// Discover, JCB, MasterCard, UnionPay, Visa, or Unknown. The
	// switch below assigns a font awesome specific card icon if
	// it is available
	let cardIcon = "stripe"
	let brandName = "Unknown"
	switch (brand.toLowerCase()) {
		case "visa":
			cardIcon = "visa"
			brandName = "Visa"
			break
		case "amex":
			cardIcon = "amex"
			brandName = "American Express"
			break
		case "diners":
			cardIcon = "diners-club"
			brandName = "Diners Club"
			break
		case "jcb":
			cardIcon = "jcb"
			brandName = "JCB"
			break
		case "mastercard":
			cardIcon = "mastercard"
			brandName = "MasterCard"
			break
		case "discover":
			cardIcon = "discover"
			brandName = "Discover"
			break
		case "unionpay":
			brandName = "UnionPay"
	}

	const methodIsSelected =
		selectedMethod && selectedMethod.paymentMethodID === method.id
			? true
			: false

	const minYear = parseInt(new Date().getFullYear().toString().substring(2, 4))
	const maxYear = minYear + 6

	// JS month integer is zero-indexed
	const minMonth =
		editingExpiry && editingExpiry.expYear === minYear
			? new Date().getMonth() + 1
			: 1
	const maxMonth = 12

	function updateExp(data) {
		const dataParsedInt = {}
		Object.keys(data).forEach(key => {
			dataParsedInt[key] = parseInt(data[key])
		})

		setEditingExpiry(Object.assign({}, editingExpiry, dataParsedInt))
	}

	return (
		<tr
			key={method.id}
			title={preferredMethod === method.id ? `Customer preferred method` : ""}
		>
			{/* Show the select checkbox only if setUpPaymentIntent
					is a prop; this means row is displayed in payment modal,
					not customer details payments tab*/}
			{setUpPaymentIntent && (
				<td className="select">
					{processing === method.id ? (
						<Spinner />
					) : (
						<input
							type="checkbox"
							checked={methodIsSelected}
							onChange={async () => {
								setProcessing(method.id)
								if (methodIsSelected) {
									await cancelOpenIntents()
								} else {
									await setUpPaymentIntent(method.id)
								}
								setProcessing(false)
							}}
							disabled={disableSelect}
						/>
					)}
				</td>
			)}
			<td className="type">
				<i className={`fab fa-cc-${cardIcon}`}></i> {brandName}
			</td>
			<td className="added">{addedOn}</td>
			<td className={cn("expiry", allowEditing && "withEditing")}>
				{!allowEditing ? (
					<span>
						{expMonth}/{expYear.toString().substring(2, 4)}
					</span>
				) : (
					<React.Fragment>
						{!editingExpiry ? (
							<span className="expNoEdit">
								{expMonth}/{expYear.toString().substring(2, 4)}
							</span>
						) : (
							<form onSubmit={updateCard}>
								<input
									type="number"
									step="1"
									min={minMonth}
									max={maxMonth}
									value={editingExpiry.expMonth}
									onChange={e => updateExp({ expMonth: e.target.value })}
									onBlur={e => {
										const newMonth = e.target.value
										if (newMonth < minMonth) {
											updateExp({ expMonth: minMonth })
										} else if (newMonth > maxMonth) {
											updateExp({ expMonth: maxMonth })
										}
									}}
								/>
								<span className="slash">/</span>
								<input
									type="number"
									step="1"
									min={minYear}
									max={maxYear}
									value={editingExpiry.expYear}
									onChange={e => updateExp({ expYear: e.target.value })}
									onBlur={e => {
										const newYear = e.target.value
										let updateYear = null
										if (newYear < minYear) {
											updateYear = minYear
										} else if (newYear > maxYear) {
											updateYear = maxYear
										}

										if (updateYear) {
											const newMinMonth =
												updateYear && updateYear === minYear
													? new Date().getMonth() + 1 // current month
													: 1

											const updateMonth =
												updateYear === minYear &&
												editingExpiry.expMonth < newMinMonth
													? newMinMonth
													: editingExpiry.expMonth

											updateExp({
												expMonth: updateMonth,
												expYear: updateYear,
											})
										}
									}}
								/>
							</form>
						)}
					</React.Fragment>
				)}
			</td>
			<td className="num">
				**** **** **** {last4}
				{preferredMethod === method.id && (
					<span className="preferred-method">
						<i className="fas fa-check-circle"></i>
					</span>
				)}
			</td>
			<td className={cn("actions", allowEditing && "withEditing")}>
				{!editingExpiry ? (
					<React.Fragment>
						{allowEditing && (
							<Button
								style="primary"
								onPress={() =>
									setEditingExpiry({
										expMonth: parseInt(expMonth),
										expYear: parseInt(expYear.toString().substring(2, 4)),
									})
								}
								title="Edit expiry date"
								icon="edit"
								size="small"
							>
								Edit
							</Button>
						)}
						<Button
							icon="times"
							style="destructive"
							size="small"
							loading={method.id === deletingCard}
							disabled={!!processing}
							title="Remove payment method"
							confirmMessage={() => (
								<p>
									Are you sure you want to delete the card ending in{" "}
									<strong>{last4}</strong>?
								</p>
							)}
							onPress={async () => {
								setDeletingCard(true)
								try {
									await api.del(
										`stripe/payment-method/${method.id}/${customerID}`
									)
									reloadData()
								} catch (err) {
									handleError({
										error: err,
										title: "Error deleting payment method",
										message: "There was an error deleting the payment method",
									})
								} finally {
									setDeletingCard(false)
								}
							}}
						/>
					</React.Fragment>
				) : (
					<React.Fragment>
						<Button
							style="primary"
							onPress={updateCard}
							loading={updatingCard}
							icon={updatingCard ? "" : "save"}
							title="Save"
							size="small"
							disabled={!editingExpiry.expMonth || !editingExpiry.expYear}
						/>
						<Button
							disabled={updatingCard || deletingCard}
							style="destructive"
							onPress={() => setEditingExpiry(null)}
							icon="ban"
							size="small"
							title="Cancel"
						/>
					</React.Fragment>
				)}
			</td>
		</tr>
	)
})
