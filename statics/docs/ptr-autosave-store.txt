import { store as resStore } from "@risingstack/react-easy-state"
import { showAlert } from "../../lib/utils"
import api from "../../lib/api"
import objectPath from "object-path"

export default function createAutosaveStore({
	load,
	storeProps,
	pollInterval = 15 * 1000,
	reloadAfterSave = false,
}) {
	let loadTimer = null
	let stopped = false
	let newRecordIDCounter = -1

	const store = resStore({
		// Store props are update functions and any other props
		// needed for the specific store
		...storeProps,
		// NB: Update functions should
		// immediately apply changes to the store, and then call
		// addToPendingUpdates with a new update object as argument

		// Loading status variables
		loading: false,
		firstLoadComplete: false,
		loadError: null,

		// Stops loading and saving when the table info is not displayed
		stop() {
			if (!stopped) {
				stopped = true
				clearTimeout(loadTimer)
			}
		},

		// Restarts loading and saving the table info
		start() {
			if (stopped) {
				stopped = false
				store.load()
				setTimeout(store.load, pollInterval)
			}
		},

		// Gets a temporary negative integer ID for new items that
		// are created in the store. Returns the current counter and
		// decrements it
		getTempID() {
			const newID = newRecordIDCounter
			newRecordIDCounter--
			return newID
		},

		// Loads data from the server and saves it to the store.
		// - Called at the specified pollInterval in order to keep the
		// page in sync with the server data.
		// - Calls save data on complete to account for any changes during the load.
		// - Uses load prop function which saves requested data directly to the store.
		async load() {
			clearTimeout(loadTimer)
			if (stopped) {
				return
			}
			if (store.loading || store.saving) {
				loadTimer = setTimeout(store.load, pollInterval)
				return
			}
			store.loading = true
			store.loadError = null

			try {
				const data = await load()
				// Abort load operation if updates are pending; do not clobber store
				if (!store.updatesPending && typeof data === "object") {
					Object.assign(store, data)
				}
			} catch (e) {
				console.error("store: load error", e)
				store.loadError = e
			} finally {
				store.firstLoadComplete = true
				store.loading = false
				// Check if save is necessary
				store.save()
			}
		},

		// Saving status variables
		saving: false,
		saveError: null,
		firstSaveComplete: false,
		get saveSuccessful() {
			return store.firstSaveComplete && !store.saveError
		},

		// Returns `true` if and only if updates are pending.
		// `load` functions should check this right before updating the store,
		// especially after any asynchronous request
		get updatesPending() {
			return store.pendingUpdates.length > 0
		},

		pendingUpdates: [],
		/* Pending updates is an array of objects in this format:
			{
				method: "updateItem", "createItem", or "deleteItem"
				customPath: custom path for requests not included in api functions
				collection: "collectionName",
				storeKey: Allows the new ID of newly created items to be automatically
					set where the tempID is being used before the new record was created.
					--> if the path of the tempID in each item of the store
							array field is "id":
								storeKey: "storeKeyName"
					--> if the path of the tempID in each item of the store
							array field is NOT "id":
								storeKey: { field: "storeKeyName", path: "path.to.id.in.array.item.object"}
				id: primary key of record in the database,
				reqBody: {
					(data to update or create with in key-value pairs)
				}
			}

			Required keys:
			- Either a customPath or method must be provided. In the case of a customPath, the
				generic API methods (patch, del, post) should be used
			- If a method is "updateItem" or "deleteItem", collectionName and id must be provided
			- If the method is "updateItem" or "createItem", reqBody must be provided
			- If the method is "createItem", storeKey and collectionName must be provided
		*/

		addToPendingUpdates(item) {
			const { method, collection, id, customPath, reqBody } = item

			if (method === "createItem") {
				// If an item is being created, push it to the pending updates
				store.pendingUpdates.push(item)
			} else if (method === "deleteItem") {
				// If deleting an item, delete any other updates with the same ID
				// and collection
				store.pendingUpdates = store.pendingUpdates.filter(
					update => update.id !== id || update.collection !== collection
				)

				if (item.id > 0) {
					// Do not queue to delete item if it has temp ID
					store.pendingUpdates.push(item)
				}
			} else if (method === "updateItem" || customPath) {
				// Look to see if there is a similar item in pending updates
				// with the same id, collection, and method/customPath
				const index = store.pendingUpdates.findIndex(
					update =>
						update.id === id &&
						update.collection === collection &&
						(update.method === method || update.customPath === customPath)
				)

				if (index > -1) {
					// If a similar pending update is found, reassign the new item's
					// reqBody with the new data at the found index.
					Object.assign(store.pendingUpdates[index].reqBody, reqBody)
				} else {
					// If the item is not found, push new item to pending updates
					store.pendingUpdates.push(item)
				}
			} else {
				const err = new Error("No valid API request method provided.")
				showAlert("error", "Method error", err.message)
				throw err
			}

			// Always call save to commit any updates
			store.save()
		},

		async save() {
			clearTimeout(loadTimer)
			if (stopped) {
				return
			}

			if (store.loading || store.saving || store.pendingUpdates.length === 0) {
				loadTimer = setTimeout(store.load, pollInterval)
				return
			}

			store.saving = true
			store.saveError = null

			while (store.pendingUpdates.length > 0) {
				const item = store.pendingUpdates.shift()
				const { method, collection, id, customPath } = item
				let { callback } = item
				const reqBody = Object.assign({}, item.reqBody)

				try {
					if (customPath) {
						// If a custom path was provided, use the method, customPath,
						// and reqBody to create a new request
						await api[method](customPath, reqBody)
					} else {
						// Create an API request based on the update info if the method
						// is a basic update, create, or delete request
						if (method === "updateItem") {
							await api.updateItem(collection, id, reqBody)
						}

						if (method === "createItem") {
							const key =
								item.storeKey && (item.storeKey.field || item.storeKey)
							const path =
								item.storeKey && item.storeKey.path ? item.storeKey.path : "id"

							// Newly created items are given a unique temporary ID of a
							// negative integer which will be in the item's reqBody
							const tempID = reqBody.id || item.id
							delete reqBody.id

							const newItem = await api.createItem(collection, reqBody)

							// Look for the temp ID in store and pending updates and replace
							// with the newly created ID
							store.pendingUpdates.forEach(update => {
								if (update.id === tempID && update.collection === collection) {
									update.id = newItem.id
								}
							})

							// If a store key is provided which is an array, update the ID
							// of the item with the tempID
							if (store[key]) {
								store[key].forEach(storeItem => {
									if (objectPath.get(storeItem, path) === tempID) {
										objectPath.set(storeItem, path, newItem.id)
									}
								})
							}
						}

						if (method === "deleteItem") {
							await api.deleteItem(collection, id)
						}
					}

					if (callback) {
						// Ensure `callback` is not called again if it throws an error
						const cb = callback
						callback = null

						await cb(null)
					}
				} catch (e) {
					console.error("store: save error", e)

					// Note: If `callback` threw the error, `callback` is not called again
					if (callback) {
						await callback(e)
					}

					// Display the error to the client/user
					store.saveError = e

					await showAlert(
						"error",
						"Save Error",
						"There was an error saving changes: " + e.message
					)

					// Return the item to pending updates
					store.pendingUpdates.unshift(item)

					// Try sync again in 5 seconds
					setTimeout(() => {
						store.saving = false
						store.save()
					}, 5000)
					return
				}
			}

			store.firstSaveComplete = true
			store.saving = false
			if (reloadAfterSave) {
				store.load()
			} else {
				store.save()
			}
		},
	})
	return store
}
