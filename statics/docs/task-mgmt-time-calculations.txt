import moment from "moment"

const timeCalculations = {
	//takes a time duration in seconds and converts to hours, minutes, and number of hours in decimal value
	formatTime: function (durationInSeconds) {
		let hours, min, seconds, decimalHrs
		const round = durationInSeconds >= 0 ? Math.floor : Math.ceil
		hours = round(durationInSeconds / 3600)
		min = round(durationInSeconds / 60 - hours * 60)
		seconds = durationInSeconds - hours * 3600 - min * 60
		decimalHrs = (durationInSeconds / 3600).toFixed(2)

		return {
			hours: Math.abs(hours),
			min: Math.abs(min).toString().padStart(2, "0"),
			seconds: Math.abs(seconds).toString().padStart(2, "0"),
			decimalHrs: decimalHrs,
		}
	},

	//Calculate the number of days from now to a certain date
	formatDaysTill: function (taskDueDate) {
		const daysTillDue = moment({ hours: 0 }).diff(moment(taskDueDate), "days")
		let daysTillString
		let formattedDate = moment(taskDueDate).format("MMM D")

		if (daysTillDue === 0) {
			daysTillString = formattedDate + " (today)"
		} else if (daysTillDue === 1) {
			daysTillString = formattedDate + " (yesterday)"
		} else if (daysTillDue === -1) {
			daysTillString = formattedDate + " (tomorrow)"
		} else if (daysTillDue > 1) {
			daysTillString = formattedDate + " (" + daysTillDue + " days ago)"
		} else if (daysTillDue < -1) {
			daysTillString =
				formattedDate + " (in " + Math.abs(daysTillDue) + " days)"
		} else if (taskDueDate === null) {
			daysTillString = "(none)"
		}

		return {
			string: daysTillString,
			number: daysTillDue,
		}
	},

	//creates a string with info about at task's priority
	formatPriorityTdTitle: function (task) {
		const { dueDate, prioritizedAt, priority } = task
		let { deadline } = task

		let tdTitle = ""
		let priorityStr = ""

		if (deadline === true) {
			deadline = "deadline"
		} else {
			deadline = "target date"
		}

		if (priority === 0) {
			priorityStr = "not prioritized"
		} else if (priority === 1) {
			priorityStr =
				"marked high priority on " + moment(prioritizedAt).format("MMM D")
		} else {
			priorityStr = "prioritized on " + moment(prioritizedAt).format("MMM D")
		}

		if (dueDate === null) {
			tdTitle = "No " + deadline + " specified; " + priority
		} else {
			tdTitle =
				deadline.charAt(0).toUpperCase() +
				deadline.slice(1) +
				" on " +
				moment(dueDate).format("MMM D") +
				"; " +
				priorityStr
		}

		return tdTitle
	},

	//calculate a time of day with number of seconds from midnight
	findTimeFromSeconds: function (seconds) {
		let hours = Math.floor(seconds / 3600)
		let min = Math.floor((seconds % 3600) / 60)
		let secs = Math.ceil(seconds - 3600 * hours - 60 * min)

		let hrsPadded = hours.toString().padStart(2, "0")
		let minPadded = min.toString().padStart(2, "0")
		let secsPadded = secs.toString().padStart(2, "0")

		let armyTime = hrsPadded + ":" + minPadded + ":" + secsPadded

		let meridian = "AM"
		if (hours === 12) {
			meridian = "PM"
		}

		if (hours > 12 && hours < 24) {
			hours -= 12
			meridian = "PM"
		}

		if (hours === 24 || hours === 0) {
			hours = 12
		}

		return {
			meridianTime: hours + ":" + min + " " + meridian,
			armyTime: armyTime,
		}
	},
}

module.exports = timeCalculations
