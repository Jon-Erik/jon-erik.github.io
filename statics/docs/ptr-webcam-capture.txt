import React, { useEffect, useRef, useState } from "react"
import PropTypes from "prop-types"
import { view } from "@risingstack/react-easy-state"
import cn from "classnames"

import "./WebcamCapture.styl"

import Button from "./Button"
import MessageBox from "./MessageBox"
import Modal from "./Modal"
import Spinner from "./Spinner"

function WebcamCapture({ className, mimeType, onCapture, onClose }) {
	const videoRef = useRef()
	const canvas = useRef()

	/* Possible component states:
		 - processing (loading)
		 - error
		 - video: focusing/aiming webcam */
	const [state, setState] = useState("processing")

	const [errMsg, setErrMsg] = useState(null)
	const [imageHeight, setImageHeight] = useState(null)
	const [imageWidth, setImageWidth] = useState(null)

	function capturePicture() {
		setState("processing")
		try {
			if (!imageHeight || !imageWidth) {
				throw new Error("Capture error: No image dimensions")
			}

			// Draw the image from the video stream on hidden canvas element
			// using height and width of video stream
			const ctx = canvas.current.getContext("2d")
			ctx.drawImage(videoRef.current, 0, 0, imageWidth, imageHeight)

			// Create a data URL for the image on the canvas
			const dataURL = canvas.current.toDataURL(mimeType, 1.0)

			onCapture(dataURL)
			onClose()
		} catch (err) {
			setErrMsg(err.message)
			console.error(err)
			setState("error")
		}
	}

	async function startVideoStream() {
		setState("processing")
		try {
			const mediaStream = await navigator.mediaDevices.getUserMedia({
				video: true,
			})

			videoRef.current.srcObject = mediaStream
			const { width, height } = mediaStream.getVideoTracks()[0].getSettings()
			setImageHeight(height)
			setImageWidth(width)

			setErrMsg(null)
			setState("video")
		} catch (err) {
			console.error(err)
			setErrMsg("Webcam Error: " + err.toString())
			setState("error")
		}
	}

	useEffect(() => {
		;(async () => {
			startVideoStream()
		})()
	}, [])

	let title
	switch (state) {
		case "processing":
			title = "Loading"
			break
		case "video":
			title = "Take a Picture"
			break
		default:
			title = "Error!"
	}

	return (
		<Modal
			title={title}
			className={cn("WebcamCapture", className)}
			hideContinueButton
			onResponse={onClose}
		>
			{/* Show any error */}
			<div className={cn(state !== "error" && "hidden")}>
				{errMsg && <MessageBox type="error">{errMsg}</MessageBox>}
				<Button
					className="wide-btn"
					text="Try again"
					onPress={startVideoStream}
					style="destructive"
				/>
			</div>

			{/* Show loading of any kind */}
			<div className={cn(state !== "processing" && "hidden")}>
				<Spinner /> <i>Loading...</i>
			</div>

			{/* Showing video stream to capture picture */}
			<div className={cn(state !== "video" && "hidden")}>
				<video ref={videoRef} height="100%" width="100%" autoPlay />
				<Button
					icon="camera"
					text="Take a picture"
					style="primary"
					className="wide-btn"
					onPress={capturePicture}
				/>
			</div>

			{/* Canvas tag is hidden from user; needed in DOM
					for image capture from media stream */}
			<canvas ref={canvas} height={imageHeight} width={imageWidth} />
		</Modal>
	)
}

WebcamCapture.propTypes = {
	className: PropTypes.string,
	mimeType: PropTypes.string,
	onCapture: PropTypes.func.isRequired,
	onClose: PropTypes.func.isRequired,
}

export default view(WebcamCapture)
